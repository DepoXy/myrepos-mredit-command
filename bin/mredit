#!/usr/bin/env bash
# vim:tw=0:ts=2:sw=2:et:norl:ft=bash
# Author: Landon Bouma <https://tallybark.com/>
# Project: https://github.com/DepoXy/myrepos-mredit-command#🧜
# License: MIT

# Copyright (c) © 2020-2023 Landon Bouma. All Rights Reserved.

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

MREDIT_CONFIGS="${MREDIT_CONFIGS:-${HOME}/.mrconfiglns}"

MREDIT_VERBOSE=${MREDIT_VERBOSE:-false}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

check_deps () {
  local failed=false

  check_dep_jq || failed=true
  check_dep_rg || failed=true
  check_dep_mktemp || failed=true
  # Called on-demand:
  #  check_dep_gvim_open_kindness || failed=true
  check_dep_realpath || failed=true

  ${failed} && exit 1
}

# ***

check_dep_jq () {
  hint_install_deb () { >&2 echo "  sudo apt-get install jq"; }
  hint_install_brew () { >&2 echo "  brew install jq"; }

  check_dep_with_hint "jq"
}

check_dep_rg () {
  hint_install_deb () { >&2 echo "  sudo apt-get install rg"; }
  hint_install_brew () { >&2 echo "  brew install rg"; }

  check_dep_with_hint "rg"
}

check_dep_gvim_open_kindness () {
  hint_install_gok () { >&2 echo "  https://github.com/DepoXy/gvim-open-kindness#🐬"; }
  hint_install_deb () { hint_install_gok; }
  hint_install_brew () { hint_install_gok; }

  check_dep_with_hint "gvim-open-kindness"
}

check_dep_mktemp () {
  hint_install_deb () { >&2 echo "  sudo apt-get install coreutils"; }
  hint_install_brew () { >&2 echo "  brew install coreutils"; }

  check_dep_with_hint "mktemp"
}

# Also `mktemp` is from coreutils on both OSes.
check_dep_realpath () {
  ( true \
    && command -v realpath > /dev/null \
    && realpath --version 2> /dev/null | head -1 | grep -q -e "(GNU coreutils)" \
  ) && return 0 || true

  hint_install_deb () { >&2 echo "  sudo apt-get install coreutils"; }
  hint_install_brew () { >&2 echo "  brew install realpath"; }

  check_dep_with_hint 'realpath' 'realpath (from coreutils)' true

  return 1
}

check_dep_with_hint () {
  cmd="$1"
  name="${2:-${cmd}}"
  assume_failed=${3:-false}

  if ! ${assume_failed}; then
    command -v ${cmd} > /dev/null && return 0 || true
  fi

  os_is_macos () { [ "$(uname)" = 'Darwin' ]; }

  >&2 echo "ERROR: Requires ‘${cmd}’"
  >&2 echo "- Hint: Install ‘${cmd}’, e.g.:"
  os_is_macos && hint_install_brew || hint_install_deb 

  return 1
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

_mredit () {
  local try_path="$(pwd)"

  find_and_open_match "${try_path}"

  # If nothing found, try a second time with absolute project root path.
  if [ ${cmd_status} -ne 0 ]; then
    local abs_path="$(git_project_root_absolute)"

    if [ "${abs_path}" != "${try_path}" ]; then
      find_and_open_match "${abs_path}"
    fi

    # If nothing found again or absolute path the same, cd up per
    # --show-cdup and get the path (which probably isn't what you
    # desire; if under a symlink to a different repo, --show-cdup
    # is relative to that other repo, so `cd`'ing up from the sym-
    # link to `pwd` will likely not be the project user is trying
    # to `mredit`/`mropen`).
    if [ ${cmd_status} -ne 0 ]; then
      local rel_path="$(git_project_root_relative)"

      if [ "${rel_path}" != "${try_path}" ] && [ "${rel_path}" != "${abs_path}" ]; then
        find_and_open_match "${rel_path}"
      fi
    fi
  fi
}

# ***

find_and_open_match () {
  local try_path="$1"

  # Normalize the search path.
  local omr_path
  omr_path="$(normal_path2mrconfig_path "${try_path}")"

  local match
  # Look for `^[{path}]` pattern matches.
  match="$(print_match "${omr_path}" "${MREDIT_CONFIGS}" "${MREDIT_PROG_F}")"
  cmd_status=$?

  # print_match was called in a $(subshell) so exit on special return code.
  # - See `return 11`: Means user was prompted and refused to pick.
  [ ${cmd_status} -eq 11 ] && exit 1

  # If nothing found, try again with the absolute path.
  if [ ${cmd_status} -ne 0 ]; then

    local abs_path="$(realpath -- "${try_path}")"

    if [ "${abs_path}" != "${try_path}" ]; then
      omr_path="$(normal_path2mrconfig_path "${abs_path}")"

      match="$(print_match "${omr_path}" "${MREDIT_CONFIGS}" "${MREDIT_PROG_F}")"
      cmd_status=$?
    fi
  fi

  local sect_cfg=""

  if [ ${cmd_status} -ne 0 ]; then
    # See if `mr` has MR_SECTION_CONFIG environ (and if
    # user's mrconfig calls `mr_cat` instead of just `cat`).
    local mr_output
    if mr_output="$(mr -d . -n run sh -c 'echo "$MR_SECTION_CONFIG"')"; then
      sect_cfg="$(echo "${mr_output}" | head -n 1)"
      if [ -n "${sect_cfg}" ]; then
        echo "Found config via MR_SECTION_CONFIG: ${sect_cfg}"

        print_match "${omr_path}" "${sect_cfg}" "${MREDIT_PROG_F}"

        match="$(print_match "${omr_path}" "${sect_cfg}" "${MREDIT_PROG_F}")"
        cmd_status=$?
      fi
    fi
  fi

  if [ ${cmd_status} -ne 0 ]; then
    if [ -f "${sect_cfg}" ]; then
      >&2 echo "Found closest config, but no line number"
      # E.g., perhaps 'include = cat <<EOF'-like call generated project
      # config at runtime without explicit '[/path/to/project]' in conf.

      open_file_in_editor "${sect_cfg}" "" "" ${MREDIT_USE_GVIM}

      return 0
    fi

    return ${cmd_status}
  fi

  open_match_in_editor "${match}" ${MREDIT_USE_GVIM}
}

# ***

# Opens result in (Terminal) vim.
open_match_in_editor () {
  local match="$1"
  local use_gvim=$2

  local file
  local row
  local col=0
  file="$(echo "${match}" | jq -r '.data.path.text' | xargs realpath)"
  row="$(echo "${match}" | jq -r '.data.line_number')"

  if [ -z "${file}" ] || [ -z "${row}" ]; then
    >&2 echo "ERROR: Unexpectedly missing file and/or line number:"
    >&2 echo "- file: ${file}"
    >&2 echo "- line: ${row}"
    >&2 echo "- match: ${match}"

    return 1
  fi

  open_file_in_editor "${file}" "${row}" "${col}" "${use_gvim}"
}

open_file_in_editor () {
  local file="$1"
  local row="$2"
  local col="$3"
  local use_gvim=$4

  if ! ${use_gvim}; then
    if [ -n "${row}" ] && [ -n "${col}" ]; then
      vim -c "call cursor(${row}, ${col})" "${file}"
    else
      vim "${file}"
    fi
  else
    if check_dep_gvim_open_kindness; then
      gvim-open-kindness "" "${row}" "${col}" "${file}"
    else
      local servername=""
      if [ -n "${GVIM_OPEN_SERVERNAME}" ] || [ -z "${GVIM_OPEN_SERVERNAME+x}" ]; then
        servername="--servername ${GVIM_OPEN_SERVERNAME:-SAMPI}"
      fi
      gvim ${servername} --remote-silent "$(echo "${file}" | sed "s/^b//")"
      if [ -n "${row}" ] && [ -n "${col}" ]; then
        gvim ${servername} --remote-send "<ESC>:call cursor("${row}", "${col}")<CR>"
      fi
      # Show user hint on using gvim-open-kindness.
      if ${MREDIT_KINDNESS_HINT_DISABLE:-false}; then
        local gvok_url="https://github.com/DepoXy/gvim-open-kindness#🐬"
        echo "HINT: Install gvim-open-kindness for better options:"
        echo "    ${gvok_url}"
        echo "- Or you can disable this message:"
        echo "    export MREDIT_KINDNESS_HINT_DISABLE=true"
      fi
    fi
  fi
}

# ***

MREDIT_PROG_F=""

create_progress_f () {
  MREDIT_PROG_F="$(mktemp)"
}

cleanup_progress_f () {
  [ -e "${MREDIT_PROG_F}" ] || return 0

  command rm -f -- "${MREDIT_PROG_F}"
}

capture_progress () {
  local error_f="$1"
  shift

  if [ -z "${error_f}" ]; then
    error_f="$(mktemp --suffix='.mredit')"
    # A little hacky...
    MREDIT_PROG_F="${error_f}"
  fi

  echo "$@" >> "${error_f}"
}

report_progress () {
  [ -e "${MREDIT_PROG_F}" ] || return 0
 
  >&2 cat -- "${MREDIT_PROG_F}"
}

# ***

git_project_root_absolute () {
  git rev-parse --show-toplevel
}

git_project_root_relative () {
  (cd "./$(git rev-parse --show-cdup)" && pwd -L)
}

# ***

normal_path2mrconfig_path () {
  local omr_path="$1"

  # FIXME/2023-02-27: Decouple these translations.
  #
  # Correct for ~/.vim/.mrconfigs, whose projects are relative, e.g.,:
  #   [pack/landonb/start/dubs_edit_juice]
  omr_path="$(echo "${omr_path}" | sed -E "s#${HOME}/.vim/##")"
  # Same for .gopath projects:
  omr_path="$(echo "${omr_path}" | sed -E "s#${HOME}/.gopath/##")"

  # Finally, correct home projects in general → use ${HOME}, not /home/user.
  omr_path="$(echo "${omr_path}" | sed -E "s#${HOME}(/|$)#\\\\\$\\\\{HOME}\1#")"
  # ")"
  # ↑ KLUGE/2023-05-12: Weird syntax highlighting bug...
  #   - I think from recent sh.vim update, ugh.
  #   - It's the \ in the \1, what's up with that??                       ↑

  echo "${omr_path}"
}

# ***

print_match () {
  local rawpath="$1"
  local targetp="$2"
  local progr_f="$3"

  # Note that a common OMR path strategy is to use an environment
  # prefix, e.g., `[${MY_WORK:-${HOME}/work}/path/to/project]`,
  # which we can easily (well, regex-easily) accommodate.
  local pattpath
  # - First add optional `}?` before each path separator.
  pattpath="$(echo "${rawpath}" | sed -E "s#/#\\\\}?/#g")"
  # - Then add a pattern to ignore the prefix `${ENVIRON:-`.
  pattpath="(\\\$\\{[A-Z_]+:-)*${pattpath}"
  # - Ignore final } in }]
  pattpath="${pattpath}\\}?"
  # - Finally, add the `^\[` prefix and `]` suffix.
  pattpath="^\\[${pattpath}]"

  capture_progress "${progr_f}" "Searching candidate:" \
    "$(echo ${rawpath} | sed 's/\\//'g)"
  capture_progress "${progr_f}" "- Proj path: ${rawpath}"
  capture_progress "${progr_f}" "  Match pat: ${pattpath}"
  capture_progress "${progr_f}" "  Cfgs path: ${targetp}"

  local fmt_json=true
  local cmd_status

  local matches_raw
  matches_raw="$(rg_search "${pattpath}" "${targetp}" ${fmt_json})"
  cmd_status=$?

  [ ${cmd_status} -eq 0 ] || return 1

  local print_matches=false

  local matches

  # Cull duplicates by `realpath`'ing the results.

  local match
  local filepath
  local filenames

  while read match; do
    [ "$(echo "${match}" | jq -r '.type')" = "match" ] || continue

    filepath="$(echo "${match}" | jq -r '.data.path.text' --exit-status | xargs realpath)"

    if ! echo "${filenames}" | grep -q -e "^${filepath}$"; then
      filenames="${filenames}${filepath}"$'\n'
      matches="${matches}${match}"$'\n'
    fi
  done <<< "${matches_raw}"

  # Remove trailing blank line.
  matches="$(echo "${matches}" | sed '/^$/d')"

  # Alert when multiple matches found.

  local n_matches
  # The `rg --json` reports total matches, e.g.,:
  #   n_matches="$(echo "${matches}" | tail -1 | jq -r '.data.stats.matches')"
  # but that value might include duplicates (if you use symlinks to manage
  # OMR config across different hosts, as the author does).
  n_matches="$(echo "${matches}" | wc -l)"
  if [ ${n_matches} -gt 1 ]; then
    >&2 echo "Multiple matches found:"
    # DEV:
    #   >&2 rg_search "${pattpath}" "${targetp}" false

    print_matches=true
  fi

  local final_match=""
  local line
  local file
  local index=0

  while read match; do
    line="$(echo "${match}" | jq -r '.data.line_number' --exit-status)"
    [ $? -eq 0 ] || continue

    file="$(echo "${match}" | jq -r '.data.path.text' --exit-status)"

    if ${print_matches}; then
      let 'index += 1'

      >&2 echo "[${index}]: ${file}:${line}"
    fi

    final_match="${match}"
  done <<< "${matches}"

  if [ -n "${final_match}" ]; then
    capture_progress "${progr_f}" "  ** Matched!"
  fi

  # Prompt user to pick a match.

  if ${print_matches}; then
    local picked

    >&2 printf "Please pick a match: "

    read picked

    final_match=""
    index=0
    while read match; do
      line="$(echo "${match}" | jq -r '.data.line_number' --exit-status)"
      [ $? -eq 0 ] || continue

      let 'index += 1'
      if [ ${index} -eq ${picked} ]; then
        final_match="${match}"

        break
      fi
    done <<< "${matches}"

    if [ -z "${final_match}" ]; then
      >&2 echo "Nothing picked!"

      return 11
    fi
  fi

  [ -n "${final_match}" ] || return 1

  echo "${final_match}"
}

# ***

rg_search () {
  local pattpath="$1"
  local targetp="$2"
  local fmt_json=$3

  local json=""
  local color="always"
  ${fmt_json} && json="--json" && color="never"

  /usr/bin/env rg \
    --hidden \
    --follow \
    --line-number \
    --color "${color}" \
    --no-ignore-vcs \
    --no-ignore-parent \
    --sort "path" \
    ${json} \
    "${pattpath}" "${targetp}"
}

# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ #

MREDIT_USE_GVIM=false

parse_args () {
  while [ "$1" != '' ]; do
    case $1 in
      -g | --gvim | gvim)
        MREDIT_USE_GVIM=true

        shift
        ;;
      *)
        >&2 echo "ERROR: Unrecognized argument: “$1”"

        exit 1
        ;;
    esac
  done
}

main () {
  check_deps

  parse_args "$@"

  create_progress_f

  local cmd_status

  _mredit
  ( [ ${cmd_status} -eq 0 ] \
    && ! ${MREDIT_VERBOSE:-false} ] ) \
    || report_progress

  cleanup_progress_f

  [ ${cmd_status} -eq 0 ] \
    || return ${cmd_status}
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# Only run when executed; no-op when sourced.
if [ "$0" = "${BASH_SOURCE[0]}" ]; then
  main "$@"
fi

